generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CURRENCY {
  RUB
  EUR
  USD
}

enum ROLE {
  owner
  admin
  employee
}

enum THEME {
  custom
  light
  dark
}

enum DAYS {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

enum DATE_TYPE {
  days
  dates
}

enum SEX {
  man
  woman
  none
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  completed
}

enum OrderStatus {
  pending
  open
  closed
  paid
}

enum PaymentType {
  online
  cash
  credit_card
}

enum UserStatus {
  invited
  active
  disable
}

enum ServiceType {
  online
  offline
}

enum MarkEnum {
  red
  orange
  green
  blue
  purple
  teal
  pink
}

model Session {
  id            String        @id               @default(uuid())

  token         String
  expiresAt     DateTime      @map("expires_at")
  ipAddress     String        @map("ip_address")

  user          User?         @relation("user_session", fields: [userId], references: [id], onDelete: Cascade)
  userId        String?       @map("user_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("sessions")
}

model CustomerSession {
  id            String        @id               @default(uuid())

  token         String
  expiresAt     DateTime      @map("expires_at")
  ipAddress     String        @map("ip_address")

  customer       CustomerAccount     @relation("customer_session", fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String       @map("customer_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("customer_sessions")
}

model Role {
  id            Int             @id              @default(autoincrement())

  name          String
  
  permissions   Permission[]   @relation("role_permissions")
  users         User[]         @relation("user_role")
  userLocations UserLocation[] @relation("user_location_role")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("roles")
}
model Permission {
  id            Int             @id              @default(autoincrement())

  name          String        @unique
  
  roles         Role[]        @relation("role_permissions")
  
  @@map("permissions")
}

model User {
  id            String        @id               @default(uuid())

  email         String        @unique
  passwordHash  String?        @map("password_hash")
  phone         String        // @unique

  firstName     String        @map("first_name")
  lastName      String?       @map("last_name")

  avatar        String?

  status        UserStatus    @default(invited)
  position      String?
  
  role          Role?          @relation("user_role", fields: [roleId], references: [id])
  roleId        Int?           @map("role_id")

  company       Company?       @relation("company_user", fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String?        @map("company_id")

  locations     UserLocation[] @relation("user_location")
  services      UserService[]  @relation("user_service")
  bookings      Booking[]     @relation("booking_employee")

  sessions      Session[]     @relation("user_session")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("users")
}

model UserLocation {
  id            String        @id               @default(uuid())
  
  user          User          @relation("user_location", fields: [userId], references: [id], onDelete: Cascade)
  userId        String        @map("user_id")
  location      Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId    String        @map("location_id")

  role          Role?         @relation("user_location_role", fields: [roleId], references: [id])
  roleId        Int?          @map("role_id")

  note          String?
  isBanned      Boolean       @default(false)   @map("is_banned")
  birthday      String?

  schedules     Schedule[]    @relation("user_location_schedule")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@unique([userId, locationId])
  @@map("users_location")
}

model Address {
  id            String        @id               @default(uuid())

  street        String?
  house         String?
  city          String
  post_code     String?
  country       String
  region        String
  timezone      String        @map("time_zone")
  timezoneoffset String       @map("time_zone_offset")
  positionLat   Decimal       @map("position_lat")
  positionLng   Decimal       @map("position_lng")

  // company       Company?      @relation("company_address", fields: [companyId], references: [id], onDelete: Cascade)
  // companyId     String?       @unique           @map("company_id")

  location      Location?     @relation("location_address", fields: [locationId], references: [id], onDelete: Cascade)
  locationId    String?       @unique           @map("location_id")
  
  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("address")
}

model Specialization {
  id            Int           @id               @default(autoincrement())

  name          String
  description   String
  icon          String

  companies     Company[]     @relation("company_specialization")
  industry      Industry[]           @relation("specialization_industry")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("specializations")
}

model Industry {
  id            Int           @id               @default(autoincrement())

  name          String

  specialization   Specialization @relation("specialization_industry", fields: [specializationId], references: [id], onDelete: Cascade)
  specializationId Int        @map("specialization_id")

  companies     Company[]     @relation("company_industry")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("Industry")
}

model Company {
  id            String        @id               @default(uuid())

  name          String
  currency      CURRENCY

  // address       Address?      @relation("company_address")

  users         User[]        @relation("company_user")

  theme         Theme?        @relation("company_theme")

  specialization Specialization @relation("company_specialization", fields: [specializationId], references: [id])
  specializationId Int        @map("specialization_id")
  industry      Industry      @relation("company_industry", fields: [industryId], references: [id])
  industryId    Int           @map("industry_id")

  services      Service[]     @relation("company_service")
  serviceCategory ServiceCategory[]             @relation("company_service_category")
  
  locations     Location[]    @relation("company_locations")

  customers     CustomerCompany[]    @relation("company_customers")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("companies")
}

model Theme {
  id            String        @id               @default(uuid())

  backgroundColor  String     @map("background_color")
  primaryColor     String     @map("primary_color")
  secondaryColor   String     @map("secondary_color")
  onSurface        String     @map("on_surface")
  surface          String
  theme            THEME

  company       Company       @relation("company_theme", fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String        @unique           @map("company_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("themes")
}

model Customer {
  id            String        @id               @default(uuid())

  firstName     String?       @map("first_name")
  lastName      String?       @map("last_name")
  email         String?       @unique
  phone         String        @unique
  birthday      String?
  avatar        String?

  account       CustomerAccount?  @relation("account_customer")
  companies     CustomerCompany[] @relation("customer_company_customer")
  bookings      Booking[]      @relation("booking_customer")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("customers")
}

model CustomerAccount {
  id            String        @id               @default(uuid())

  phone         String        @unique
  verified      Boolean       @default(false)
  lastLoginAt   DateTime?     @map("last_login_at")

  customer      Customer      @relation("account_customer", fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String        @unique           @map("customer_id")
  sessions      CustomerSession[]               @relation("customer_session")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("customer_accounts")
}

model CustomerCompany {
  id            String        @id               @default(uuid())

  customer      Customer      @relation("customer_company_customer", fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String        @map("customer_id")

  note          String?
  isBanned      Boolean?      @default(false)   @map("is_banned")

  company       Company       @relation("company_customers", fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String        @map("company_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("customer_companies")
}

model Location {
  id            String        @id               @default(uuid())

  name          String
  description   String?
  phone         String
  comfort       String[]
  category      String[]
  avatar        String?

  address       Address?      @relation("location_address")

  company       Company       @relation("company_locations", fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String        @map("company_id")

  bookings      Booking[]     @relation("booking_locations")

  users         UserLocation[]
  services      LocationService[]               @relation("location_service")

  invites       Invite[]      @relation("location_invite")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("locations")
}

model Invite {
  id            String        @id               @default(cuid())

  token         String        @unique
  email         String
  expiresAt     DateTime      @map("expires_at")
  location      Location      @relation("location_invite", fields: [locationId], references: [id], onDelete: Cascade)
  role          Int?           
  locationId    String        @map("location_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("invites")
}

model UserService {
  id            String        @id               @default(uuid())

  user          User          @relation("user_service", fields: [userId], references: [id], onDelete: Cascade)
  userId        String        @map("user_id")

  service       Service       @relation("service_user", fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId     String        @map("service_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@unique([userId, serviceId])
  @@map("user_services")
}

model LocationService {
  id            String        @id               @default(uuid())

  location      Location      @relation("location_service", fields: [locationId], references: [id], onDelete: Cascade)
  locationId    String        @map("location_id")

  service       Service       @relation("service_location", fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId     String        @map("service_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@unique([locationId, serviceId])
  @@map("location_services")
}

model Service {
  id            String        @id               @default(uuid())

  name          String
  publicName    String?       @map("public_name")
  mark          MarkEnum      // цвет
  // mark          String      // цвет

  duration      Int

  type          ServiceType

  days          String[]
  timeStart     String        @map("time_start")
  timeEnd       String        @map("time_end")

  category      String?

  company       Company       @relation("company_service", fields: [companyId], references: [id])
  companyId     String

  price         ServicePrice? @relation("service_prices")
  discount      DiscountPrice?  @relation("service_discount")
  discountId    Int?          @unique
  bookings      Booking[]     @relation("booking_service")

  users         UserService[]                   @relation("service_user")
  locations     LocationService[]               @relation("service_location")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("services")
}

model ServiceCategory {
  id            Int           @id               @default(autoincrement())

  name          String

  company       Company       @relation("company_service_category", fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String        @map("company_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("service_category")
}

model ServicePrice {
  id            String        @id               @default(uuid())

  price         Int
  costPrice     Int?          @map("cost_price") // себестоимость

  service       Service       @relation("service_prices", fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId     String        @unique           @map("service_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("service_prices")
}

model DiscountPrice {
  id            Int           @id               @default(autoincrement())
  
  dateType      DATE_TYPE?    @map("date_type")
  days          String[]
  price         Int?
  timeStart     String?       @map("time_start")
  timeEnd       String?       @map("time_end")

  service       Service       @relation("service_discount", fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId     String        @unique @map("service_id")
  
  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("discount_price")
}

model Booking {
  id            String        @id               @default(uuid())

  name          String
  startTime     String        @map("start_time")
  endTime       String        @map("end_time")
  date          String
  comment       String?
  status        BookingStatus @default(pending)

  location      Location      @relation("booking_locations", fields: [locationId], references: [id])
  locationId    String

  customer      Customer      @relation("booking_customer", fields: [customerId], references: [id])
  customerId    String

  service       Service       @relation("booking_service", fields: [serviceId], references: [id])
  serviceId     String

  employee      User          @relation("booking_employee", fields: [employeeId], references: [id])
  employeeId    String

  order         Order?        @relation("booking_order", fields: [orderId], references: [id])
  orderId       String?

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("bookings")
}

model Order {
  id            String        @id               @default(uuid())

  status        OrderStatus   @default(pending)
  subtotal      Int
  total         Int?
  discount      Int?
  paymentMethod PaymentType   @map("payment_method")
  paidAt        DateTime?     @map("paid_at")
  comment       String?

  bookings      Booking[]     @relation("booking_order")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("orders")
}

model Schedule {
  id            Int           @id               @default(autoincrement())

  // date          DateTime
  date          String

  intervals     ScheduleInterval[]              @relation("schedule_intervals_model")

  userLocation  UserLocation  @relation("user_location_schedule", fields: [userLocationId], references: [id], onDelete: Cascade)
  userLocationId String       @map("user_location_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("schedules")
}

model ScheduleInterval {
  id            Int           @id               @default(autoincrement())

  start         String
  end           String

  schedule      Schedule      @relation("schedule_intervals_model", fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId    Int           @map("schedule_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("schedule_intervals")
}
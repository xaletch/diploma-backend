generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CURRENCY {
  RUB
  EUR
  USD
}

enum ROLE {
  owner
  admin
  employee
}

enum THEME {
  custom
  light
  dark
}

enum DAYS {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

enum DATE_TYPE {
  days
  dates
}

enum SEX {
  man
  woman
  none
}

enum UserStatus {
  invited
  active
  disable
}

model Session {
  id            String        @id               @default(uuid())

  token         String
  expiresAt     DateTime      @map("expires_at")
  ipAddress     String        @map("ip_address")

  user          User?         @relation("user_session", fields: [userId], references: [id], onDelete: Cascade)
  userId        String?       @map("user_id")

  customer       Customer?     @relation("customer_session", fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String?       @map("customer_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("sessions")
}

model Role {
  id            String        @id               @default(uuid())

  name          String
  permissions   Permission[]  @relation("role_permission")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("roles")
}
model Permission {
  id            String        @id               @default(uuid())
  name          String        @unique
  roles         Role[]        @relation("role_permission")

  @@map("permissions")
}

model User {
  id            String        @id               @default(uuid())

  email         String        @unique
  passwordHash  String?        @map("password_hash")
  phone         String        // @unique

  firstName     String        @map("first_name")
  lastName      String?       @map("last_name")

  status        UserStatus    @default(invited)
  role          ROLE
  position      String?

  // company       Company?      @relation("company_user", fields: [companyId], references: [id], onDelete: Cascade)
  // companyId     String?       @unique           @map("company_id")
  company       Company?      @relation("company_user")

  locations     UserLocation[] @relation("user_location")

  sessions      Session[]     @relation("user_session")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("users")
}

model UserLocation {
  id            String        @id               @default(uuid())
  
  user          User          @relation("user_location", fields: [userId], references: [id])
  userId        String        @map("user_id")
  location      Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId    String        @map("location_id")

  role          ROLE

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("users_location")
}

model Address {
  id            String        @id               @default(uuid())

  street        String?
  house         String?
  city          String
  post_code     String?
  country       String
  region        String
  timezone      String        @map("time_zone")
  timezoneoffset String       @map("time_zone_offset")
  positionLat   Decimal       @map("position_lat")
  positionLng   Decimal       @map("position_lng")

  // company       Company?      @relation("company_address", fields: [companyId], references: [id], onDelete: Cascade)
  // companyId     String?       @unique           @map("company_id")

  location      Location?     @relation("location_address", fields: [locationId], references: [id], onDelete: Cascade)
  locationId    String?       @unique           @map("location_id")
  
  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("address")
}

model Specialization {
  id            Int           @id               @default(autoincrement())

  name          String
  description   String
  icon          String

  companies     Company[]     @relation("company_specialization")
  industry      Industry[]           @relation("specialization_industry")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("specializations")
}

model Industry {
  id            Int           @id               @default(autoincrement())

  name          String

  specialization   Specialization @relation("specialization_industry", fields: [specializationId], references: [id], onDelete: Cascade)
  specializationId Int        @map("specialization_id")

  companies     Company[]     @relation("company_industry")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("Industry")
}

model Company {
  id            String        @id               @default(uuid())

  name          String
  currency      CURRENCY

  // address       Address?      @relation("company_address")

  user          User?         @relation("company_user", fields: [userId], references: [id], onDelete: Cascade)
  userId        String?          @unique         @map("user_id")
  theme         Theme?        @relation("company_theme")

  specialization Specialization @relation("company_specialization", fields: [specializationId], references: [id])
  specializationId Int        @map("specialization_id")
  industry      Industry      @relation("company_industry", fields: [industryId], references: [id])
  industryId    Int           @map("industry_id")
  
  locations     Location[]    @relation("company_locations")

  customers     Customer[]    @relation("company_customers")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("companies")
}

model Theme {
  id            String        @id               @default(uuid())

  backgroundColor  String     @map("background_color")
  primaryColor     String     @map("primary_color")
  secondaryColor   String     @map("secondary_color")
  onSurface        String     @map("on_surface")
  surface          String
  theme            THEME

  company       Company       @relation("company_theme", fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String        @unique           @map("company_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("themes")
}

model Customer {
  id            String        @id               @default(uuid())

  firstName     String        @map("first_name")
  lastName      String?       @map("last_name")
  email         String
  phone         String
  birthday      String?

  sessions      Session[]     @relation("customer_session")

  company       Company       @relation("company_customers", fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String        @map("company_id")

  services      Service[]     @relation("customer_services")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("customers")
}

model Location {
  id            String        @id               @default(uuid())

  name          String
  description   String?
  phone         String
  comfort       String[]
  category      String[]

  address       Address?      @relation("location_address")

  company       Company       @relation("company_locations", fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String        @map("company_id")

  users         UserLocation[]

  invites       Invite[]      @relation("location_invite")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("locations")
}

model Invite {
  id            String        @id               @default(cuid())

  token         String        @unique
  email         String
  expiresAt     DateTime      @map("expires_at")
  location      Location      @relation("location_invite", fields: [locationId], references: [id], onDelete: Cascade)
  role          ROLE
  locationId    String        @map("location_id")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("invites")
}

model Service {
  id            String        @id               @default(uuid())

  name          String
  publicName    String        @map("public_name")
  mark          String        // цвет
  duration      Int

  price         ServicePrice? @relation("service_prices")

  users         Customer[]    @relation("customer_services")

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("services")
}

model ServicePrice {
  id            String        @id               @default(uuid())

  price         Int
  costPrice     Int?          @map("cost_price") // себестоимость

  service       Service       @relation("service_prices", fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId     String        @unique           @map("service_id")

  discount      DiscountPrice?  @relation("service_price_discount", fields: [discountId], references: [id])
  discountId    Int?          @unique

  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("service_prices")
}

model DiscountPrice {
  id            Int           @id               @default(autoincrement())
  
  dateType      DATE_TYPE     @map("date_type")
  days          String[]
  price         Int
  timeStart     String        @map("time_start")
  timeEnd       String        @map("time_end")

  servicePrice  ServicePrice? @relation("service_price_discount")
  
  createdAt     DateTime      @default(now())   @map("created_at")
  updatedAt     DateTime      @updatedAt        @map("updated_at")

  @@map("discount_price")
}
